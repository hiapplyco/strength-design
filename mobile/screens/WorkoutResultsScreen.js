/**
 * WorkoutResultsScreen - AI-Generated Workout Display & Management
 * 
 * Features:
 * - Display Gemini-generated workout programs and days
 * - Real-time editing with AI assistance
 * - Progress tracking and analytics
 * - Social sharing with beautiful graphics
 * - Offline support with local state management
 * - Beautiful glassmorphism UI with smooth animations
 * 
 * @screen WorkoutResultsScreen
 * @author Claude AI Assistant
 * @version 2.0.0
 * @created 2025-08-18
 */

import React, { useState, useEffect, useRef, useCallback } from 'react';
import {
  View,
  Text,
  ScrollView,
  TouchableOpacity,
  StyleSheet,
  Dimensions,
  Alert,
  Animated,
  StatusBar,
  SafeAreaView,
  RefreshControl,
  ActivityIndicator,
  TextInput,
  KeyboardAvoidingView,
  Platform,
} from 'react-native';
import { LinearGradient } from 'expo-linear-gradient';
import { BlurView } from 'expo-blur';
import { Ionicons } from '@expo/vector-icons';
import * as Haptics from 'expo-haptics';
import { httpsCallable } from 'firebase/functions';

// Import design system and components
import { SafeLinearGradient, GlassGradient } from '../components/SafeLinearGradient';
import ShareWorkoutDrawer from '../components/ShareWorkoutDrawer';
import { useTheme } from '../contexts/ThemeContext';
import { colors, spacing, borderRadius, typography, shadows } from '../utils/designTokens';
import { functions } from '../config/firebase';

const { width: screenWidth, height: screenHeight } = Dimensions.get('window');

const WorkoutResultsScreen = ({ route, navigation }) => {
  const { isDarkMode, theme } = useTheme();
  const { generatedWorkout, programData, userPreferences } = route.params || {};
  
  // State management
  const [currentWorkout, setCurrentWorkout] = useState(generatedWorkout || null);
  const [currentProgram, setCurrentProgram] = useState(programData || null);
  const [selectedWeek, setSelectedWeek] = useState(1);
  const [selectedDay, setSelectedDay] = useState(null);
  const [editingDay, setEditingDay] = useState(null);
  const [editRequest, setEditRequest] = useState('');
  const [isEditing, setIsEditing] = useState(false);
  const [shareDrawerVisible, setShareDrawerVisible] = useState(false);
  const [shareType, setShareType] = useState('workout');
  const [shareContent, setShareContent] = useState(null);
  const [refreshing, setRefreshing] = useState(false);
  const [loading, setLoading] = useState(false);
  const [workoutSessions, setWorkoutSessions] = useState([]);
  const [progressStats, setProgressStats] = useState({
    totalWorkouts: 0,
    completedSessions: 0,
    averageRating: 0,
    totalVolume: 0,
    personalRecords: 0,
    currentStreak: 0
  });

  // Animation values
  const fadeAnim = useRef(new Animated.Value(0)).current;
  const slideAnim = useRef(new Animated.Value(30)).current;
  const editModalAnim = useRef(new Animated.Value(0)).current;

  // Firebase function references
  const editWorkoutDayFunction = httpsCallable(functions, 'editWorkoutDay');

  useEffect(() => {
    // Entrance animations
    Animated.parallel([
      Animated.timing(fadeAnim, {
        toValue: 1,
        duration: 800,
        useNativeDriver: true,
      }),
      Animated.timing(slideAnim, {
        toValue: 0,
        duration: 600,
        useNativeDriver: true,
      }),
    ]).start();

    // Initialize data if not provided
    if (!currentWorkout && !currentProgram) {
      generateSampleWorkout();
    }

    // Load user progress and sessions
    loadProgressData();
  }, []);

  // Load progress data (simulated for demo)
  const loadProgressData = async () => {
    try {
      // Simulate loading user progress data
      const mockStats = {
        totalWorkouts: 12,
        completedSessions: 8,
        averageRating: 4.2,
        totalVolume: 15420,
        personalRecords: 5,
        currentStreak: 3
      };
      setProgressStats(mockStats);

      // Simulate recent sessions
      const mockSessions = [
        { id: '1', date: new Date(Date.now() - 86400000), rating: 5, duration: 65 },
        { id: '2', date: new Date(Date.now() - 172800000), rating: 4, duration: 72 },
        { id: '3', date: new Date(Date.now() - 259200000), rating: 4, duration: 58 },
      ];
      setWorkoutSessions(mockSessions);
    } catch (error) {
      console.error('Error loading progress data:', error);
    }
  };

  // Generate sample workout for demo purposes
  const generateSampleWorkout = () => {
    const sampleProgram = {
      id: 'ai-generated-program',
      title: 'AI-Generated Strength Program',
      description: 'Personalized 4-week program generated by our AI coach based on your goals and preferences.',
      summary: 'Build strength and muscle with progressive overload',
      totalWeeks: 4,
      daysPerWeek: 4,
      difficulty: userPreferences?.fitnessLevel || 'intermediate',
      programType: 'strength',
      goals: ['strength', 'muscle_gain'],
      
      weeks: [
        {
          id: 'ai-week-1',
          weekNumber: 1,
          title: 'Foundation Building',
          description: 'Establish proper form and movement patterns',
          isDeloadWeek: false,
          
          days: [
            {
              id: 'ai-w1d1',
              dayNumber: 1,
              weekNumber: 1,
              title: 'Upper Body Strength',
              description: 'Focus on bench press, rows, and shoulder development with moderate intensity',
              estimatedDuration: 75,
              difficulty: 'intermediate',
              focusAreas: ['Chest', 'Back', 'Shoulders'],
              restDay: false,
              
              warmup: {
                id: 'ai-warmup-1',
                name: 'Upper Body Activation',
                type: 'warmup',
                estimatedDuration: 10,
                exercises: [
                  {
                    id: 'band-pull-aparts',
                    name: 'Band Pull-Aparts',
                    category: 'mobility',
                    sets: [{ id: 's1', type: 'working', reps: 15, weight: 0 }],
                    restPeriods: { between_sets: 30 }
                  }
                ]
              },
              
              workout: {
                id: 'ai-main-1',
                name: 'Main Workout',
                type: 'main',
                estimatedDuration: 50,
                exercises: [
                  {
                    id: 'bench-press-ai',
                    name: 'Barbell Bench Press',
                    category: 'strength',
                    primaryMuscles: ['Chest', 'Triceps', 'Anterior Deltoids'],
                    sets: [
                      { id: 's1', type: 'warmup', reps: 8, weight: 135, weightUnit: 'lbs' },
                      { id: 's2', type: 'working', reps: 6, weight: 165, weightUnit: 'lbs' },
                      { id: 's3', type: 'working', reps: 6, weight: 175, weightUnit: 'lbs' },
                      { id: 's4', type: 'working', reps: 6, weight: 185, weightUnit: 'lbs' },
                    ],
                    restPeriods: { between_sets: 180 },
                    instructions: ['Lower bar to chest with control', 'Press up explosively', 'Keep feet planted']
                  },
                  {
                    id: 'bent-row-ai',
                    name: 'Barbell Bent-Over Row',
                    category: 'strength',
                    primaryMuscles: ['Latissimus Dorsi', 'Rhomboids', 'Middle Traps'],
                    sets: [
                      { id: 's1', type: 'working', reps: 8, weight: 145, weightUnit: 'lbs' },
                      { id: 's2', type: 'working', reps: 8, weight: 155, weightUnit: 'lbs' },
                      { id: 's3', type: 'working', reps: 8, weight: 165, weightUnit: 'lbs' },
                    ],
                    restPeriods: { between_sets: 150 }
                  }
                ]
              },
              
              strength: {
                id: 'ai-accessory-1',
                name: 'Accessory Work',
                type: 'strength',
                estimatedDuration: 15,
                exercises: [
                  {
                    id: 'dumbbell-shoulder-press',
                    name: 'Dumbbell Shoulder Press',
                    category: 'strength',
                    sets: [
                      { id: 's1', type: 'working', reps: 10, weight: 45, weightUnit: 'lbs' },
                      { id: 's2', type: 'working', reps: 10, weight: 50, weightUnit: 'lbs' },
                      { id: 's3', type: 'working', reps: 10, weight: 55, weightUnit: 'lbs' },
                    ],
                    restPeriods: { between_sets: 90 }
                  }
                ]
              }
            }
          ]
        }
      ]
    };
    
    setCurrentProgram(sampleProgram);
  };

  // Handle refresh
  const onRefresh = useCallback(async () => {
    setRefreshing(true);
    await loadProgressData();
    await Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);
    setRefreshing(false);
  }, []);

  // Handle AI-powered day editing
  const handleEditDay = (day) => {
    setEditingDay(day);
    setEditRequest('');
    setIsEditing(true);
    
    Animated.timing(editModalAnim, {
      toValue: 1,
      duration: 300,
      useNativeDriver: true,
    }).start();
    
    Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Medium);
  };

  // Submit edit request to AI
  const submitEditRequest = async () => {
    if (!editRequest.trim() || !editingDay) {
      Alert.alert('Error', 'Please describe what you want to change');
      return;
    }

    setLoading(true);
    
    try {
      await Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Medium);
      
      // Call Firebase function to edit workout day
      const result = await editWorkoutDayFunction({
        currentDay: editingDay,
        userRequest: editRequest,
        programContext: currentProgram,
        dayNumber: editingDay.dayNumber,
        weekNumber: editingDay.weekNumber,
        fitnessLevel: userPreferences?.fitnessLevel || 'intermediate',
        userPreferences: userPreferences || {},
        availableEquipment: userPreferences?.equipment || [],
        timeConstraints: userPreferences?.timeConstraints || {},
        injuryRestrictions: userPreferences?.injuries || [],
        previousSessions: workoutSessions
      });

      if (result.data && result.data.editedDay) {
        const editedDay = result.data.editedDay;
        
        // Update the program with the edited day
        const updatedProgram = { ...currentProgram };
        const weekIndex = updatedProgram.weeks.findIndex(w => w.weekNumber === editingDay.weekNumber);
        const dayIndex = updatedProgram.weeks[weekIndex].days.findIndex(d => d.id === editingDay.id);
        
        // Add metadata about the edit
        editedDay.lastModified = new Date().toISOString();
        editedDay.modifiedBy = 'ai_assistant';
        editedDay.originalRequest = editRequest;
        
        updatedProgram.weeks[weekIndex].days[dayIndex] = editedDay;
        setCurrentProgram(updatedProgram);
        
        // Close edit modal
        closeEditModal();
        
        await Haptics.notificationAsync(Haptics.NotificationFeedbackType.Success);
        Alert.alert(
          'Workout Updated! 🎉',
          'Your workout has been intelligently modified based on your request.',
          [{ text: 'Great!' }]
        );
      } else {
        throw new Error('Invalid response from AI');
      }
    } catch (error) {
      console.error('Edit error:', error);
      await Haptics.notificationAsync(Haptics.NotificationFeedbackType.Error);
      Alert.alert(
        'Edit Failed',
        'Unable to modify the workout. Please try again with a different request.',
        [{ text: 'OK' }]
      );
    } finally {
      setLoading(false);
    }
  };

  // Close edit modal
  const closeEditModal = () => {
    Animated.timing(editModalAnim, {
      toValue: 0,
      duration: 250,
      useNativeDriver: true,
    }).start(() => {
      setIsEditing(false);
      setEditingDay(null);
      setEditRequest('');
    });
  };

  // Handle sharing
  const handleShare = (type, content) => {
    setShareType(type);
    setShareContent(content);
    setShareDrawerVisible(true);
    Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Medium);
  };

  // Start workout session
  const handleStartWorkout = (day) => {
    Alert.alert(
      'Start Workout Session',
      `Ready to begin "${day.title}"?\n\nEstimated duration: ${day.estimatedDuration} minutes`,
      [
        {
          text: 'Start Tracking',
          onPress: () => {
            Haptics.notificationAsync(Haptics.NotificationFeedbackType.Success);
            // Navigate to workout tracking screen
            navigation.navigate('WorkoutTracking', { 
              workoutDay: day,
              program: currentProgram 
            });
          }
        },
        { text: 'Cancel', style: 'cancel' }
      ]
    );
  };

  // Progress overview component
  const ProgressOverview = () => (
    <GlassGradient
      intensity="medium"
      style={[
        styles.progressContainer,
        {
          borderColor: isDarkMode ? colors.dark.border.light : colors.light.border.light,
        }
      ]}
    >
      <View style={styles.progressHeader}>
        <Text style={[
          styles.sectionTitle,
          { color: isDarkMode ? colors.dark.text.primary : colors.light.text.primary }
        ]}>
          Your Progress
        </Text>
        <TouchableOpacity
          onPress={() => navigation.navigate('ProgressAnalytics')}
          style={styles.viewMoreButton}
        >
          <Text style={[styles.viewMoreText, { color: colors.primary.DEFAULT }]}>
            View All
          </Text>
          <Ionicons name="chevron-forward" size={16} color={colors.primary.DEFAULT} />
        </TouchableOpacity>
      </View>
      
      <View style={styles.statsGrid}>
        <View style={styles.statItem}>
          <SafeLinearGradient
            type="accent"
            variant={isDarkMode ? "aurora" : "sunset"}
            style={styles.statIcon}
          >
            <Ionicons name="fitness" size={20} color="white" />
          </SafeLinearGradient>
          <Text style={[styles.statValue, { color: isDarkMode ? colors.dark.text.primary : colors.light.text.primary }]}>
            {progressStats.completedSessions}
          </Text>
          <Text style={[
            styles.statLabel,
            { color: isDarkMode ? colors.dark.text.tertiary : colors.light.text.tertiary }
          ]}>
            Sessions
          </Text>
        </View>
        
        <View style={styles.statItem}>
          <SafeLinearGradient
            type="accent"
            variant={isDarkMode ? "glow" : "golden"}
            style={styles.statIcon}
          >
            <Ionicons name="trophy" size={20} color="white" />
          </SafeLinearGradient>
          <Text style={[styles.statValue, { color: isDarkMode ? colors.dark.text.primary : colors.light.text.primary }]}>
            {progressStats.personalRecords}
          </Text>
          <Text style={[
            styles.statLabel,
            { color: isDarkMode ? colors.dark.text.tertiary : colors.light.text.tertiary }
          ]}>
            PRs
          </Text>
        </View>
        
        <View style={styles.statItem}>
          <SafeLinearGradient
            type="accent"
            variant={isDarkMode ? "ember" : "warm"}
            style={styles.statIcon}
          >
            <Ionicons name="flame" size={20} color="white" />
          </SafeLinearGradient>
          <Text style={[styles.statValue, { color: isDarkMode ? colors.dark.text.primary : colors.light.text.primary }]}>
            {progressStats.currentStreak}
          </Text>
          <Text style={[
            styles.statLabel,
            { color: isDarkMode ? colors.dark.text.tertiary : colors.light.text.tertiary }
          ]}>
            Streak
          </Text>
        </View>
        
        <View style={styles.statItem}>
          <SafeLinearGradient
            type="accent"
            variant={isDarkMode ? "teal" : "primary"}
            style={styles.statIcon}
          >
            <Ionicons name="star" size={20} color="white" />
          </SafeLinearGradient>
          <Text style={[styles.statValue, { color: isDarkMode ? colors.dark.text.primary : colors.light.text.primary }]}>
            {progressStats.averageRating.toFixed(1)}
          </Text>
          <Text style={[
            styles.statLabel,
            { color: isDarkMode ? colors.dark.text.tertiary : colors.light.text.tertiary }
          ]}>
            Rating
          </Text>
        </View>
      </View>
    </GlassGradient>
  );

  // Week selector component
  const WeekSelector = () => (
    <View style={styles.weekSelector}>
      <Text style={[
        styles.sectionTitle,
        { color: isDarkMode ? colors.dark.text.primary : colors.light.text.primary }
      ]}>
        Program Timeline
      </Text>
      <ScrollView horizontal showsHorizontalScrollIndicator={false}>
        {currentProgram?.weeks?.map((week) => (
          <TouchableOpacity
            key={week.id}
            style={[
              styles.weekTab,
              selectedWeek === week.weekNumber && styles.weekTabActive,
              {
                backgroundColor: selectedWeek === week.weekNumber
                  ? colors.primary.DEFAULT
                  : (isDarkMode ? colors.dark.background.glass.medium : colors.light.background.glass.medium),
                borderColor: selectedWeek === week.weekNumber
                  ? colors.primary.DEFAULT
                  : (isDarkMode ? colors.dark.border.light : colors.light.border.light)
              }
            ]}
            onPress={() => {
              setSelectedWeek(week.weekNumber);
              Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);
            }}
          >
            <Text style={[
              styles.weekTabText,
              { color: selectedWeek === week.weekNumber ? 'white' : (isDarkMode ? colors.dark.text.primary : colors.light.text.primary) }
            ]}>
              Week {week.weekNumber}
            </Text>
            <Text style={[
              styles.weekTabSubtext,
              { color: selectedWeek === week.weekNumber ? 'rgba(255,255,255,0.8)' : (isDarkMode ? colors.dark.text.secondary : colors.light.text.secondary) }
            ]}>
              {week.title}
            </Text>
          </TouchableOpacity>
        ))}
      </ScrollView>
    </View>
  );

  // Enhanced day card component
  const DayCard = ({ day, weekNumber }) => (
    <GlassGradient
      intensity="medium"
      style={[
        styles.dayCard,
        {
          borderColor: isDarkMode ? colors.dark.border.light : colors.light.border.light,
        }
      ]}
    >
      <View style={styles.dayCardHeader}>
        <View style={styles.dayInfo}>
          <View style={styles.dayTitleRow}>
            <Text style={[
              styles.dayTitle,
              { color: isDarkMode ? colors.dark.text.primary : colors.light.text.primary }
            ]}>
              {day.title}
            </Text>
            {day.lastModified && (
              <View style={styles.aiModifiedBadge}>
                <Ionicons name="sparkles" size={12} color={colors.primary.DEFAULT} />
                <Text style={[styles.aiModifiedText, { color: colors.primary.DEFAULT }]}>
                  AI Modified
                </Text>
              </View>
            )}
          </View>
          <Text style={[
            styles.daySubtitle,
            { color: isDarkMode ? colors.dark.text.secondary : colors.light.text.secondary }
          ]}>
            Day {day.dayNumber} • Week {weekNumber} • {day.difficulty}
          </Text>
        </View>
        
        <View style={styles.dayActions}>
          <TouchableOpacity
            style={[styles.actionButton, { backgroundColor: `${colors.primary.DEFAULT}20` }]}
            onPress={() => handleShare('day', day)}
          >
            <Ionicons name="share-outline" size={20} color={colors.primary.DEFAULT} />
          </TouchableOpacity>
          <TouchableOpacity
            style={[styles.actionButton, { backgroundColor: `${colors.semantic.warning.light.primary}20` }]}
            onPress={() => handleEditDay(day)}
          >
            <Ionicons name="sparkles" size={20} color={colors.semantic.warning.light.primary} />
          </TouchableOpacity>
        </View>
      </View>
      
      <Text style={[
        styles.dayDescription,
        { color: isDarkMode ? colors.dark.text.secondary : colors.light.text.secondary }
      ]}>
        {day.description}
      </Text>
      
      <View style={styles.dayMeta}>
        <View style={styles.metaItem}>
          <Ionicons 
            name="time-outline" 
            size={16} 
            color={isDarkMode ? colors.dark.text.tertiary : colors.light.text.tertiary} 
          />
          <Text style={[
            styles.metaText,
            { color: isDarkMode ? colors.dark.text.tertiary : colors.light.text.tertiary }
          ]}>
            {day.estimatedDuration} min
          </Text>
        </View>
        <View style={styles.metaItem}>
          <Ionicons 
            name="fitness-outline" 
            size={16} 
            color={isDarkMode ? colors.dark.text.tertiary : colors.light.text.tertiary} 
          />
          <Text style={[
            styles.metaText,
            { color: isDarkMode ? colors.dark.text.tertiary : colors.light.text.tertiary }
          ]}>
            {day.focusAreas?.join(', ') || 'Full Body'}
          </Text>
        </View>
      </View>
      
      {/* Exercise preview */}
      {day.workout?.exercises?.length > 0 && (
        <View style={styles.exercisePreview}>
          <Text style={[
            styles.exercisePreviewTitle,
            { color: isDarkMode ? colors.dark.text.primary : colors.light.text.primary }
          ]}>
            Key Exercises:
          </Text>
          <Text style={[
            styles.exercisePreviewText,
            { color: isDarkMode ? colors.dark.text.secondary : colors.light.text.secondary }
          ]}>
            {day.workout.exercises.slice(0, 3).map(ex => ex.name).join(' • ')}
          </Text>
        </View>
      )}
      
      {day.restDay || day.activeRecovery ? (
        <TouchableOpacity
          style={[styles.restButton, { backgroundColor: `${colors.semantic.info.light.primary}20` }]}
          onPress={() => Alert.alert('Recovery Day', 'Light movement and stretching recommended')}
        >
          <Ionicons name="leaf-outline" size={20} color={colors.semantic.info.light.primary} />
          <Text style={[styles.restButtonText, { color: colors.semantic.info.light.primary }]}>
            {day.activeRecovery ? 'Active Recovery' : 'Rest Day'}
          </Text>
        </TouchableOpacity>
      ) : (
        <TouchableOpacity
          style={[styles.startButton, { backgroundColor: colors.primary.DEFAULT }]}
          onPress={() => handleStartWorkout(day)}
        >
          <Ionicons name="play" size={20} color="white" />
          <Text style={styles.startButtonText}>Start Workout</Text>
        </TouchableOpacity>
      )}
    </GlassGradient>
  );

  // Edit modal component
  const EditModal = () => (
    <Animated.View
      style={[
        styles.editModalContainer,
        {
          opacity: editModalAnim,
          transform: [
            {
              scale: editModalAnim.interpolate({
                inputRange: [0, 1],
                outputRange: [0.9, 1],
              }),
            },
          ],
          pointerEvents: isEditing ? 'auto' : 'none',
        },
      ]}
    >
      <TouchableOpacity
        style={styles.editModalBackdrop}
        onPress={closeEditModal}
        activeOpacity={1}
      />
      
      <KeyboardAvoidingView
        behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
        style={styles.editModalKeyboard}
      >
        <BlurView
          intensity={isDarkMode ? 20 : 30}
          style={styles.editModalContent}
          tint={isDarkMode ? 'dark' : 'light'}
        >
          <View style={styles.editModalHeader}>
            <Text style={[
              styles.editModalTitle,
              { color: isDarkMode ? colors.dark.text.primary : colors.light.text.primary }
            ]}>
              Edit with AI Assistant
            </Text>
            <TouchableOpacity onPress={closeEditModal}>
              <Ionicons 
                name="close" 
                size={24} 
                color={isDarkMode ? colors.dark.text.secondary : colors.light.text.secondary} 
              />
            </TouchableOpacity>
          </View>
          
          <Text style={[
            styles.editModalSubtitle,
            { color: isDarkMode ? colors.dark.text.secondary : colors.light.text.secondary }
          ]}>
            Editing: {editingDay?.title}
          </Text>
          
          <Text style={[
            styles.editModalInstruction,
            { color: isDarkMode ? colors.dark.text.tertiary : colors.light.text.tertiary }
          ]}>
            Describe what you'd like to change about this workout:
          </Text>
          
          <TextInput
            style={[
              styles.editInput,
              {
                backgroundColor: isDarkMode ? colors.dark.background.glass.subtle : colors.light.background.glass.subtle,
                borderColor: isDarkMode ? colors.dark.border.medium : colors.light.border.medium,
                color: isDarkMode ? colors.dark.text.primary : colors.light.text.primary,
              }
            ]}
            placeholder="e.g., 'Replace bench press with push-ups' or 'Make it shorter'"
            placeholderTextColor={isDarkMode ? colors.dark.text.tertiary : colors.light.text.tertiary}
            value={editRequest}
            onChangeText={setEditRequest}
            multiline
            numberOfLines={4}
            textAlignVertical="top"
          />
          
          <View style={styles.editModalActions}>
            <TouchableOpacity
              style={[
                styles.editModalButton,
                styles.editModalButtonSecondary,
                {
                  backgroundColor: isDarkMode ? colors.dark.background.glass.medium : colors.light.background.glass.medium,
                  borderColor: isDarkMode ? colors.dark.border.medium : colors.light.border.medium,
                }
              ]}
              onPress={closeEditModal}
            >
              <Text style={[
                styles.editModalButtonText,
                { color: isDarkMode ? colors.dark.text.primary : colors.light.text.primary }
              ]}>
                Cancel
              </Text>
            </TouchableOpacity>
            
            <TouchableOpacity
              style={[
                styles.editModalButton,
                styles.editModalButtonPrimary,
                { backgroundColor: colors.primary.DEFAULT }
              ]}
              onPress={submitEditRequest}
              disabled={loading || !editRequest.trim()}
            >
              {loading ? (
                <ActivityIndicator size="small" color="white" />
              ) : (
                <>
                  <Ionicons name="sparkles" size={20} color="white" />
                  <Text style={styles.editModalButtonTextPrimary}>
                    Edit with AI
                  </Text>
                </>
              )}
            </TouchableOpacity>
          </View>
        </BlurView>
      </KeyboardAvoidingView>
    </Animated.View>
  );

  const currentWeek = currentProgram?.weeks?.find(w => w.weekNumber === selectedWeek);

  if (!currentProgram) {
    return (
      <SafeAreaView style={[
        styles.container,
        { backgroundColor: isDarkMode ? colors.dark.background.primary : colors.light.background.primary }
      ]}>
        <View style={styles.emptyState}>
          <ActivityIndicator size="large" color={colors.primary.DEFAULT} />
          <Text style={[
            styles.emptyStateText,
            { color: isDarkMode ? colors.dark.text.secondary : colors.light.text.secondary }
          ]}>
            Loading your personalized workout...
          </Text>
        </View>
      </SafeAreaView>
    );
  }

  return (
    <SafeAreaView style={[
      styles.container,
      { backgroundColor: isDarkMode ? colors.dark.background.primary : colors.light.background.primary }
    ]}>
      <StatusBar
        barStyle={isDarkMode ? 'light-content' : 'dark-content'}
        backgroundColor="transparent"
        translucent
      />
      
      {/* Header */}
      <SafeLinearGradient
        type="background"
        variant={isDarkMode ? "cosmic" : "warm"}
        style={styles.header}
      >
        <Animated.View 
          style={[
            styles.headerContent,
            { opacity: fadeAnim, transform: [{ translateY: slideAnim }] }
          ]}
        >
          <TouchableOpacity
            onPress={() => navigation.goBack()}
            style={styles.backButton}
          >
            <Ionicons name="arrow-back" size={24} color="white" />
          </TouchableOpacity>
          
          <View style={styles.headerInfo}>
            <Text style={styles.headerTitle}>{currentProgram.title}</Text>
            <Text style={styles.headerSubtitle}>
              AI-Generated • {currentProgram.totalWeeks} weeks • {currentProgram.difficulty}
            </Text>
          </View>
          
          <TouchableOpacity
            onPress={() => handleShare('program', currentProgram)}
            style={styles.shareButton}
          >
            <Ionicons name="share-outline" size={24} color="white" />
          </TouchableOpacity>
        </Animated.View>
      </SafeLinearGradient>

      <ScrollView 
        style={styles.scrollView}
        showsVerticalScrollIndicator={false}
        bounces={true}
        refreshControl={
          <RefreshControl
            refreshing={refreshing}
            onRefresh={onRefresh}
            tintColor={colors.primary.DEFAULT}
          />
        }
      >
        <Animated.View 
          style={[
            styles.content,
            { opacity: fadeAnim, transform: [{ translateY: slideAnim }] }
          ]}
        >
          {/* Program Description */}
          <GlassGradient
            intensity="medium"
            style={[
              styles.descriptionCard,
              {
                borderColor: isDarkMode ? colors.dark.border.light : colors.light.border.light,
              }
            ]}
          >
            <View style={styles.descriptionHeader}>
              <Ionicons name="sparkles" size={24} color={colors.primary.DEFAULT} />
              <Text style={[
                styles.descriptionTitle,
                { color: isDarkMode ? colors.dark.text.primary : colors.light.text.primary }
              ]}>
                AI-Generated Program
              </Text>
            </View>
            
            <Text style={[
              styles.description,
              { color: isDarkMode ? colors.dark.text.secondary : colors.light.text.secondary }
            ]}>
              {currentProgram.description}
            </Text>
            
            <View style={styles.programTags}>
              {currentProgram.goals?.map((goal, index) => (
                <View key={index} style={[styles.tag, { backgroundColor: `${colors.primary.DEFAULT}20` }]}>
                  <Text style={[styles.tagText, { color: colors.primary.DEFAULT }]}>
                    {goal.replace('_', ' ')}
                  </Text>
                </View>
              ))}
            </View>
          </GlassGradient>

          {/* Progress Overview */}
          <ProgressOverview />

          {/* Week Selector */}
          <WeekSelector />

          {/* Days List */}
          <View style={styles.daysSection}>
            <Text style={[
              styles.sectionTitle,
              { color: isDarkMode ? colors.dark.text.primary : colors.light.text.primary }
            ]}>
              {currentWeek?.title} - Week {selectedWeek}
            </Text>
            
            {currentWeek?.description && (
              <Text style={[
                styles.weekDescription,
                { color: isDarkMode ? colors.dark.text.secondary : colors.light.text.secondary }
              ]}>
                {currentWeek.description}
              </Text>
            )}
            
            {currentWeek?.days?.map(day => (
              <DayCard 
                key={day.id} 
                day={day} 
                weekNumber={selectedWeek}
              />
            ))}
          </View>

          {/* AI Features Note */}
          <GlassGradient
            intensity="subtle"
            style={[
              styles.aiNote,
              {
                borderColor: colors.semantic.info.light.primary,
                backgroundColor: `${colors.semantic.info.light.primary}10`
              }
            ]}
          >
            <Ionicons name="sparkles" size={20} color={colors.semantic.info.light.primary} />
            <Text style={[
              styles.aiNoteText,
              { color: colors.semantic.info.light.primary }
            ]}>
              This program was intelligently generated based on your goals and preferences. 
              Use the AI edit feature to customize any workout day!
            </Text>
          </GlassGradient>
          
          {/* Bottom spacing */}
          <View style={{ height: 50 }} />
        </Animated.View>
      </ScrollView>

      {/* Edit Modal */}
      {isEditing && <EditModal />}

      {/* Share Drawer */}
      <ShareWorkoutDrawer
        visible={shareDrawerVisible}
        onClose={() => setShareDrawerVisible(false)}
        shareType={shareType}
        program={shareType === 'program' ? currentProgram : null}
        day={shareType === 'day' ? shareContent : null}
        workout={shareType === 'workout' ? shareContent : null}
      />
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  header: {
    paddingTop: spacing[12],
    paddingBottom: spacing[6],
    paddingHorizontal: spacing[5],
  },
  headerContent: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
  },
  backButton: {
    padding: spacing[2],
    borderRadius: borderRadius.full,
    backgroundColor: 'rgba(255, 255, 255, 0.2)',
  },
  headerInfo: {
    flex: 1,
    marginHorizontal: spacing[4],
    alignItems: 'center',
  },
  headerTitle: {
    fontSize: typography.fontSize['2xl'],
    fontWeight: typography.fontWeight.bold,
    color: 'white',
    textAlign: 'center',
    marginBottom: spacing[1],
  },
  headerSubtitle: {
    fontSize: typography.fontSize.sm,
    color: 'rgba(255, 255, 255, 0.8)',
    textAlign: 'center',
  },
  shareButton: {
    padding: spacing[2],
    borderRadius: borderRadius.full,
    backgroundColor: 'rgba(255, 255, 255, 0.2)',
  },
  scrollView: {
    flex: 1,
  },
  content: {
    padding: spacing[5],
  },
  descriptionCard: {
    padding: spacing[4],
    borderRadius: borderRadius.lg,
    borderWidth: 1,
    marginBottom: spacing[5],
  },
  descriptionHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: spacing[3],
    marginBottom: spacing[3],
  },
  descriptionTitle: {
    fontSize: typography.fontSize.lg,
    fontWeight: typography.fontWeight.semibold,
  },
  description: {
    fontSize: typography.fontSize.base,
    lineHeight: typography.fontSize.base * 1.5,
    marginBottom: spacing[4],
  },
  programTags: {
    flexDirection: 'row',
    gap: spacing[2],
    flexWrap: 'wrap',
  },
  tag: {
    paddingHorizontal: spacing[3],
    paddingVertical: spacing[1],
    borderRadius: borderRadius.full,
  },
  tagText: {
    fontSize: typography.fontSize.sm,
    fontWeight: typography.fontWeight.medium,
    textTransform: 'capitalize',
  },
  progressContainer: {
    padding: spacing[4],
    borderRadius: borderRadius.lg,
    borderWidth: 1,
    marginBottom: spacing[5],
  },
  progressHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: spacing[4],
  },
  viewMoreButton: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: spacing[1],
  },
  viewMoreText: {
    fontSize: typography.fontSize.sm,
    fontWeight: typography.fontWeight.medium,
  },
  statsGrid: {
    flexDirection: 'row',
    justifyContent: 'space-between',
  },
  statItem: {
    alignItems: 'center',
    flex: 1,
  },
  statIcon: {
    width: 40,
    height: 40,
    borderRadius: borderRadius.full,
    alignItems: 'center',
    justifyContent: 'center',
    marginBottom: spacing[2],
  },
  statValue: {
    fontSize: typography.fontSize.xl,
    fontWeight: typography.fontWeight.bold,
    marginBottom: spacing[1],
  },
  statLabel: {
    fontSize: typography.fontSize.xs,
    textTransform: 'uppercase',
    fontWeight: typography.fontWeight.medium,
  },
  sectionTitle: {
    fontSize: typography.fontSize.xl,
    fontWeight: typography.fontWeight.semibold,
    marginBottom: spacing[4],
  },
  weekSelector: {
    marginBottom: spacing[6],
  },
  weekTab: {
    padding: spacing[4],
    borderRadius: borderRadius.md,
    borderWidth: 1,
    marginRight: spacing[3],
    minWidth: 130,
    alignItems: 'center',
  },
  weekTabActive: {
    borderWidth: 2,
  },
  weekTabText: {
    fontSize: typography.fontSize.base,
    fontWeight: typography.fontWeight.semibold,
    marginBottom: spacing[1],
  },
  weekTabSubtext: {
    fontSize: typography.fontSize.xs,
    textAlign: 'center',
  },
  daysSection: {
    gap: spacing[4],
  },
  weekDescription: {
    fontSize: typography.fontSize.sm,
    marginBottom: spacing[4],
    fontStyle: 'italic',
  },
  dayCard: {
    padding: spacing[4],
    borderRadius: borderRadius.lg,
    borderWidth: 1,
    position: 'relative',
  },
  dayCardHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'flex-start',
    marginBottom: spacing[3],
  },
  dayInfo: {
    flex: 1,
  },
  dayTitleRow: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: spacing[2],
    marginBottom: spacing[1],
  },
  dayTitle: {
    fontSize: typography.fontSize.lg,
    fontWeight: typography.fontWeight.semibold,
    flex: 1,
  },
  aiModifiedBadge: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: spacing[1],
    backgroundColor: 'rgba(255, 107, 53, 0.1)',
    paddingHorizontal: spacing[2],
    paddingVertical: spacing[1],
    borderRadius: borderRadius.sm,
  },
  aiModifiedText: {
    fontSize: typography.fontSize.xs,
    fontWeight: typography.fontWeight.medium,
  },
  daySubtitle: {
    fontSize: typography.fontSize.sm,
  },
  dayActions: {
    flexDirection: 'row',
    gap: spacing[2],
  },
  actionButton: {
    width: 36,
    height: 36,
    borderRadius: borderRadius.md,
    alignItems: 'center',
    justifyContent: 'center',
  },
  dayDescription: {
    fontSize: typography.fontSize.sm,
    lineHeight: typography.fontSize.sm * 1.4,
    marginBottom: spacing[4],
  },
  dayMeta: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: spacing[4],
  },
  metaItem: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: spacing[1],
    flex: 1,
  },
  metaText: {
    fontSize: typography.fontSize.sm,
  },
  exercisePreview: {
    marginBottom: spacing[4],
  },
  exercisePreviewTitle: {
    fontSize: typography.fontSize.sm,
    fontWeight: typography.fontWeight.medium,
    marginBottom: spacing[1],
  },
  exercisePreviewText: {
    fontSize: typography.fontSize.sm,
  },
  startButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    padding: spacing[3],
    borderRadius: borderRadius.md,
    gap: spacing[2],
  },
  startButtonText: {
    color: 'white',
    fontSize: typography.fontSize.base,
    fontWeight: typography.fontWeight.semibold,
  },
  restButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    padding: spacing[3],
    borderRadius: borderRadius.md,
    gap: spacing[2],
  },
  restButtonText: {
    fontSize: typography.fontSize.base,
    fontWeight: typography.fontWeight.medium,
  },
  aiNote: {
    flexDirection: 'row',
    alignItems: 'flex-start',
    gap: spacing[3],
    padding: spacing[4],
    borderRadius: borderRadius.md,
    borderWidth: 1,
    marginTop: spacing[6],
  },
  aiNoteText: {
    flex: 1,
    fontSize: typography.fontSize.sm,
    lineHeight: typography.fontSize.sm * 1.4,
  },
  emptyState: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    gap: spacing[4],
  },
  emptyStateText: {
    fontSize: typography.fontSize.base,
  },
  editModalContainer: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    zIndex: 1000,
  },
  editModalBackdrop: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.6)',
  },
  editModalKeyboard: {
    position: 'absolute',
    bottom: 0,
    left: 0,
    right: 0,
  },
  editModalContent: {
    borderTopLeftRadius: borderRadius.xl,
    borderTopRightRadius: borderRadius.xl,
    padding: spacing[6],
    paddingBottom: spacing[8],
  },
  editModalHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: spacing[2],
  },
  editModalTitle: {
    fontSize: typography.fontSize.xl,
    fontWeight: typography.fontWeight.bold,
  },
  editModalSubtitle: {
    fontSize: typography.fontSize.base,
    marginBottom: spacing[4],
  },
  editModalInstruction: {
    fontSize: typography.fontSize.sm,
    marginBottom: spacing[3],
  },
  editInput: {
    borderWidth: 1,
    borderRadius: borderRadius.md,
    padding: spacing[4],
    height: 100,
    marginBottom: spacing[6],
    fontSize: typography.fontSize.base,
  },
  editModalActions: {
    flexDirection: 'row',
    gap: spacing[3],
  },
  editModalButton: {
    flex: 1,
    padding: spacing[4],
    borderRadius: borderRadius.md,
    alignItems: 'center',
    justifyContent: 'center',
    flexDirection: 'row',
    gap: spacing[2],
  },
  editModalButtonSecondary: {
    borderWidth: 1,
  },
  editModalButtonPrimary: {
    backgroundColor: colors.primary.DEFAULT,
  },
  editModalButtonText: {
    fontSize: typography.fontSize.base,
    fontWeight: typography.fontWeight.medium,
  },
  editModalButtonTextPrimary: {
    color: 'white',
    fontSize: typography.fontSize.base,
    fontWeight: typography.fontWeight.semibold,
  },
});

export default WorkoutResultsScreen;