import React, { useEffect, useRef, useState, useCallback, useMemo } from 'react';
import {
  View,
  Text,
  Animated,
  Dimensions,
  StyleSheet,
  TouchableOpacity,
  ScrollView,
  StatusBar,
  Platform
} from 'react-native';

const { width: SCREEN_WIDTH, height: SCREEN_HEIGHT } = Dimensions.get('window');

// Optimized Pixel Component
const AnimatedPixel = React.memo(({ pixel, colors }) => {
  const animatedValue = useRef(new Animated.Value(0)).current;
  const shimmerValue = useRef(new Animated.Value(0)).current;

  useEffect(() => {
    // Appear animation
    Animated.timing(animatedValue, {
      toValue: 1,
      duration: 400,
      delay: pixel.delay,
      useNativeDriver: true,
    }).start();

    // Shimmer animation
    Animated.loop(
      Animated.sequence([
        Animated.timing(shimmerValue, {
          toValue: 1,
          duration: 1000,
          delay: pixel.shimmerDelay,
          useNativeDriver: true,
        }),
        Animated.timing(shimmerValue, {
          toValue: 0,
          duration: 1000,
          useNativeDriver: true,
        }),
      ])
    ).start();
  }, []);

  const scale = animatedValue.interpolate({
    inputRange: [0, 1],
    outputRange: [0, 1],
  });

  const opacity = animatedValue.interpolate({
    inputRange: [0, 1],
    outputRange: [0, 1],
  });

  const shimmerOpacity = shimmerValue.interpolate({
    inputRange: [0, 1],
    outputRange: [1, 0.6],
  });

  return (
    <Animated.View
      style={[
        styles.pixel,
        {
          left: pixel.x,
          top: pixel.y,
          width: pixel.size,
          height: pixel.size,
          backgroundColor: pixel.color,
          opacity: Animated.multiply(opacity, shimmerOpacity),
          transform: [{ scale }],
          shadowColor: pixel.color,
          shadowOffset: { width: 0, height: 0 },
          shadowOpacity: 0.5,
          shadowRadius: pixel.size / 3,
          elevation: 5,
        },
      ]}
    />
  );
});

// Loading Dots Component
const LoadingDots = ({ colors }) => {
  const dots = useRef([
    new Animated.Value(0),
    new Animated.Value(0),
    new Animated.Value(0),
  ]).current;

  useEffect(() => {
    dots.forEach((dot, index) => {
      Animated.loop(
        Animated.sequence([
          Animated.timing(dot, {
            toValue: 1,
            duration: 600,
            delay: index * 150,
            useNativeDriver: true,
          }),
          Animated.timing(dot, {
            toValue: 0,
            duration: 600,
            useNativeDriver: true,
          }),
        ])
      ).start();
    });
  }, []);

  return (
    <View style={styles.dotsContainer}>
      {dots.map((dot, i) => (
        <Animated.View
          key={i}
          style={[
            styles.dot,
            {
              backgroundColor: colors[i % colors.length],
              transform: [
                {
                  scale: dot.interpolate({
                    inputRange: [0, 1],
                    outputRange: [1, 1.3],
                  }),
                },
              ],
              opacity: dot.interpolate({
                inputRange: [0, 1],
                outputRange: [1, 0.6],
              }),
            },
          ]}
        />
      ))}
    </View>
  );
};

// Main Shimmer Effect Component
const PixelShimmerEffect = ({
  isVisible = true,
  onComplete,
  message = "Loading...",
  subMessage = "",
  pixelSize = 20, // Larger default for mobile performance
  colors = ['#00D4FF', '#00FF88', '#FF00FF', '#8A2BE2', '#FFD700'],
  duration = 3000,
  pattern = null,
  animationType = 'spiral',
}) => {
  const [showMessage, setShowMessage] = useState(false);
  const [progress, setProgress] = useState(0);
  const fadeAnim = useRef(new Animated.Value(0)).current;
  const messageAnim = useRef(new Animated.Value(0)).current;
  const progressAnim = useRef(new Animated.Value(0)).current;

  // Pre-defined patterns
  const patterns = useMemo(() => ({
    humanFigure: [
      [0,0,0,1,1,1,0,0,0],
      [0,0,1,1,1,1,1,0,0],
      [0,0,0,1,1,1,0,0,0],
      [0,0,0,0,1,0,0,0,0],
      [0,1,1,1,1,1,1,1,0],
      [1,1,1,1,1,1,1,1,1],
      [0,0,0,1,1,1,0,0,0],
      [0,0,0,1,0,1,0,0,0],
      [0,0,1,1,0,1,1,0,0],
      [0,1,1,0,0,0,1,1,0]
    ],
    dumbbell: [
      [1,1,0,0,0,0,0,1,1],
      [1,1,0,0,0,0,0,1,1],
      [0,0,1,1,1,1,1,0,0],
      [0,0,1,1,1,1,1,0,0],
      [1,1,0,0,0,0,0,1,1],
      [1,1,0,0,0,0,0,1,1]
    ],
    heart: [
      [0,1,1,0,0,0,1,1,0],
      [1,1,1,1,0,1,1,1,1],
      [1,1,1,1,1,1,1,1,1],
      [0,1,1,1,1,1,1,1,0],
      [0,0,1,1,1,1,1,0,0],
      [0,0,0,1,1,1,0,0,0],
      [0,0,0,0,1,0,0,0,0]
    ],
    trophy: [
      [1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1],
      [0,1,1,1,1,1,0],
      [0,0,1,1,1,0,0],
      [0,0,1,1,1,0,0],
      [0,1,1,1,1,1,0],
      [1,1,1,1,1,1,1]
    ],
    lightning: [
      [0,0,1,1,0,0],
      [0,1,1,0,0,0],
      [1,1,1,1,0,0],
      [0,1,1,1,1,0],
      [0,0,1,1,0,0],
      [0,1,1,0,0,0]
    ]
  }), []);

  // Calculate animation delay
  const getAnimationDelay = useCallback((x, y, centerX, centerY) => {
    const distance = Math.sqrt(Math.pow(x - centerX, 2) + Math.pow(y - centerY, 2));
    
    switch (animationType) {
      case 'wave':
        return (x * 15) + (Math.sin(y * 0.3) * 100);
      case 'explosion':
        return distance * 10;
      case 'scan':
        return x * 20;
      case 'pulse':
        return Math.floor(distance / 3) * 200;
      case 'spiral':
      default:
        const angle = Math.atan2(y - centerY, x - centerX);
        const normalizedAngle = (angle + Math.PI) / (2 * Math.PI);
        return (distance * 15) + (normalizedAngle * 500);
    }
  }, [animationType]);

  // Generate pixels
  const pixels = useMemo(() => {
    if (!isVisible) return [];

    const cols = Math.floor(SCREEN_WIDTH / pixelSize);
    const rows = Math.floor(SCREEN_HEIGHT / pixelSize);
    const centerX = cols / 2;
    const centerY = rows / 2;
    const pixelArray = [];

    const currentPattern = pattern && patterns[pattern] ? patterns[pattern] : null;
    const patternWidth = currentPattern ? currentPattern[0].length : 0;
    const patternHeight = currentPattern ? currentPattern.length : 0;
    const patternStartX = Math.floor((cols - patternWidth) / 2);
    const patternStartY = Math.floor((rows - patternHeight) / 2);

    // Step for performance (skip pixels on lower-end devices)
    const step = pattern ? 1 : 2;

    for (let x = 0; x < cols; x += step) {
      for (let y = 0; y < rows; y += step) {
        let shouldCreatePixel = true;

        if (currentPattern) {
          const patternX = x - patternStartX;
          const patternY = y - patternStartY;
          
          shouldCreatePixel = (
            patternX >= 0 && 
            patternX < patternWidth &&
            patternY >= 0 && 
            patternY < patternHeight &&
            currentPattern[patternY][patternX] === 1
          );
        } else {
          // Random distribution for non-pattern
          shouldCreatePixel = Math.random() > 0.3;
        }

        if (shouldCreatePixel) {
          const delay = getAnimationDelay(x, y, centerX, centerY);
          
          pixelArray.push({
            id: `${x}-${y}`,
            x: x * pixelSize,
            y: y * pixelSize,
            color: colors[Math.floor(Math.random() * colors.length)],
            delay: Math.min(delay, 2000),
            shimmerDelay: Math.random() * 2000,
            size: pixelSize - 4
          });
        }
      }
    }
    
    return pixelArray;
  }, [isVisible, pattern, pixelSize, colors, animationType, patterns, getAnimationDelay]);

  useEffect(() => {
    if (!isVisible) return;

    // Fade in
    Animated.timing(fadeAnim, {
      toValue: 1,
      duration: 300,
      useNativeDriver: true,
    }).start();

    // Show message
    setTimeout(() => {
      setShowMessage(true);
      Animated.timing(messageAnim, {
        toValue: 1,
        duration: 500,
        useNativeDriver: true,
      }).start();
    }, 100);

    // Progress animation
    Animated.timing(progressAnim, {
      toValue: 1,
      duration: duration,
      useNativeDriver: false,
    }).start();

    // Update progress value for display
    const progressInterval = setInterval(() => {
      setProgress(prev => {
        const next = prev + (100 / (duration / 100));
        return next >= 100 ? 100 : next;
      });
    }, 100);

    // Auto-complete
    const completeTimer = setTimeout(() => {
      Animated.parallel([
        Animated.timing(fadeAnim, {
          toValue: 0,
          duration: 300,
          useNativeDriver: true,
        }),
        Animated.timing(messageAnim, {
          toValue: 0,
          duration: 300,
          useNativeDriver: true,
        }),
      ]).start(() => {
        if (onComplete) onComplete();
      });
    }, duration);

    return () => {
      clearTimeout(completeTimer);
      clearInterval(progressInterval);
    };
  }, [isVisible, duration, onComplete, fadeAnim, messageAnim, progressAnim]);

  if (!isVisible) return null;

  return (
    <Animated.View style={[styles.container, { opacity: fadeAnim }]}>
      {/* Background gradient effect */}
      <View style={styles.gradientContainer}>
        <View style={[styles.gradientCircle, { 
          backgroundColor: colors[0] + '15',
          left: '20%',
          top: '30%',
        }]} />
        <View style={[styles.gradientCircle, { 
          backgroundColor: colors[1] + '15',
          right: '20%',
          bottom: '30%',
        }]} />
      </View>

      {/* Pixel Grid */}
      <View style={styles.pixelContainer}>
        {pixels.map((pixel) => (
          <AnimatedPixel key={pixel.id} pixel={pixel} colors={colors} />
        ))}
      </View>

      {/* Loading Message */}
      <Animated.View style={[styles.messageContainer, { opacity: messageAnim }]}>
        <Text style={[styles.messageText, { textShadowColor: colors[0] + '66' }]}>
          {message}
        </Text>
        
        {subMessage ? (
          <Text style={styles.subMessageText}>{subMessage}</Text>
        ) : null}

        {/* Progress Bar */}
        <View style={styles.progressContainer}>
          <Animated.View 
            style={[
              styles.progressBar,
              {
                width: progressAnim.interpolate({
                  inputRange: [0, 1],
                  outputRange: ['0%', '100%'],
                }),
                backgroundColor: colors[0],
              }
            ]} 
          />
        </View>

        {/* Loading Dots */}
        <LoadingDots colors={colors} />
      </Animated.View>
    </Animated.View>
  );
};

// Demo App Component
export default function App() {
  const [showShimmer, setShowShimmer] = useState(false);
  const [currentScenario, setCurrentScenario] = useState(null);

  const scenarios = [
    {
      name: "💪 Workout Generation",
      message: "Creating Your Workout",
      subMessage: "Analyzing fitness level...",
      colors: ['#00FF88', '#00D4FF', '#00FFFF'],
      pattern: 'humanFigure',
      duration: 3000,
      animationType: 'spiral',
      pixelSize: 24
    },
    {
      name: "🔍 Exercise Search",
      message: "Searching Exercises",
      subMessage: "Scanning database...",
      colors: ['#FFD700', '#FF6B6B', '#4ECDC4'],
      pattern: null,
      duration: 2000,
      animationType: 'scan',
      pixelSize: 20
    },
    {
      name: "🏆 Level Up",
      message: "LEVEL UP!",
      subMessage: "Achievement unlocked!",
      colors: ['#FFD700', '#FFA500', '#FF69B4', '#00FF00'],
      pattern: 'trophy',
      duration: 3500,
      animationType: 'explosion',
      pixelSize: 22
    },
    {
      name: "🏋️ Equipment",
      message: "Loading Equipment",
      subMessage: "Preparing gear...",
      colors: ['#FF6B6B', '#FF8C00', '#FFB347'],
      pattern: 'dumbbell',
      duration: 2500,
      animationType: 'pulse',
      pixelSize: 24
    },
    {
      name: "⚡ Power Mode",
      message: "POWER MODE",
      subMessage: "Activating...",
      colors: ['#FFFF00', '#FFA500', '#FF4500'],
      pattern: 'lightning',
      duration: 2500,
      animationType: 'wave',
      pixelSize: 22
    },
    {
      name: "❤️ Recovery",
      message: "Recovery Mode",
      subMessage: "Rest & heal...",
      colors: ['#FFB6C1', '#FF69B4', '#FF1493'],
      pattern: 'heart',
      duration: 3000,
      animationType: 'pulse',
      pixelSize: 24
    }
  ];

  const triggerShimmer = (scenario) => {
    setCurrentScenario(scenario);
    setShowShimmer(true);
  };

  const handleComplete = () => {
    setShowShimmer(false);
    setCurrentScenario(null);
  };

  return (
    <>
      <StatusBar barStyle="light-content" backgroundColor="#0a0a0a" />
      <View style={styles.appContainer}>
        <ScrollView 
          contentContainerStyle={styles.scrollContent}
          showsVerticalScrollIndicator={false}
        >
          {/* Header */}
          <View style={styles.header}>
            <Text style={styles.title}>Pixel Shimmer</Text>
            <Text style={styles.subtitle}>React Native Edition</Text>
          </View>

          {/* Scenario Buttons */}
          <View style={styles.scenarioGrid}>
            {scenarios.map((scenario, index) => (
              <TouchableOpacity
                key={index}
                style={styles.scenarioButton}
                onPress={() => triggerShimmer(scenario)}
                activeOpacity={0.8}
              >
                <View style={styles.scenarioContent}>
                  <View>
                    <Text style={styles.scenarioName}>{scenario.name}</Text>
                    <Text style={styles.scenarioInfo}>
                      {scenario.animationType} • {(scenario.duration / 1000).toFixed(1)}s
                    </Text>
                  </View>
                  <View style={styles.colorPreview}>
                    {scenario.colors.slice(0, 3).map((color, i) => (
                      <View
                        key={i}
                        style={[styles.colorDot, { backgroundColor: color }]}
                      />
                    ))}
                  </View>
                </View>
              </TouchableOpacity>
            ))}
          </View>

          {/* Info Box */}
          <View style={styles.infoBox}>
            <Text style={styles.infoText}>
              💡 Optimized for React Native performance
            </Text>
          </View>
        </ScrollView>

        {/* Shimmer Overlay */}
        {showShimmer && currentScenario && (
          <PixelShimmerEffect
            isVisible={showShimmer}
            onComplete={handleComplete}
            {...currentScenario}
          />
        )}
      </View>
    </>
  );
}

const styles = StyleSheet.create({
  container: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    backgroundColor: '#000',
    zIndex: 9999,
  },
  gradientContainer: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
  },
  gradientCircle: {
    position: 'absolute',
    width: SCREEN_WIDTH * 0.8,
    height: SCREEN_WIDTH * 0.8,
    borderRadius: SCREEN_WIDTH * 0.4,
  },
  pixelContainer: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
  },
  pixel: {
    position: 'absolute',
    borderRadius: 2,
  },
  messageContainer: {
    position: 'absolute',
    bottom: SCREEN_HEIGHT * 0.25,
    left: 0,
    right: 0,
    alignItems: 'center',
  },
  messageText: {
    color: '#fff',
    fontSize: 28,
    fontWeight: '700',
    marginBottom: 8,
    textShadowOffset: { width: 0, height: 0 },
    textShadowRadius: 30,
    letterSpacing: 0.5,
  },
  subMessageText: {
    color: '#888',
    fontSize: 14,
    marginBottom: 20,
  },
  progressContainer: {
    width: 180,
    height: 3,
    backgroundColor: 'rgba(255, 255, 255, 0.1)',
    borderRadius: 2,
    marginVertical: 20,
    overflow: 'hidden',
  },
  progressBar: {
    height: '100%',
    borderRadius: 2,
  },
  dotsContainer: {
    flexDirection: 'row',
    justifyContent: 'center',
    gap: 12,
  },
  dot: {
    width: 10,
    height: 10,
    borderRadius: 5,
    marginHorizontal: 6,
  },
  // App Styles
  appContainer: {
    flex: 1,
    backgroundColor: '#0a0a0a',
  },
  scrollContent: {
    paddingHorizontal: 20,
    paddingTop: Platform.OS === 'ios' ? 60 : 40,
    paddingBottom: 40,
  },
  header: {
    alignItems: 'center',
    marginBottom: 40,
  },
  title: {
    fontSize: 36,
    fontWeight: '800',
    color: '#00D4FF',
    marginBottom: 8,
  },
  subtitle: {
    fontSize: 16,
    color: '#666',
  },
  scenarioGrid: {
    gap: 12,
  },
  scenarioButton: {
    padding: 20,
    backgroundColor: '#1a1a1a',
    borderWidth: 2,
    borderColor: '#333',
    borderRadius: 16,
    marginBottom: 12,
  },
  scenarioContent: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  scenarioName: {
    fontSize: 18,
    fontWeight: '600',
    color: '#fff',
    marginBottom: 4,
  },
  scenarioInfo: {
    fontSize: 12,
    color: '#666',
  },
  colorPreview: {
    flexDirection: 'row',
    gap: 4,
  },
  colorDot: {
    width: 20,
    height: 20,
    borderRadius: 4,
    marginLeft: 4,
  },
  infoBox: {
    marginTop: 30,
    padding: 16,
    backgroundColor: 'rgba(0, 212, 255, 0.1)',
    borderRadius: 12,
    borderWidth: 1,
    borderColor: 'rgba(0, 212, 255, 0.2)',
  },
  infoText: {
    color: '#00D4FF',
    fontSize: 14,
    textAlign: 'center',
  },
});