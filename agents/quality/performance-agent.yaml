name: PerformanceAgent
version: 1.0.0
description: Optimizes mobile app performance, bundle size, and resource usage
parent: MasterAgent

specializations:
  - bundle_optimization
  - render_performance
  - memory_management
  - network_optimization
  - battery_efficiency
  - startup_time

performance_targets:
  app_startup:
    cold_start: < 2000ms
    warm_start: < 1000ms
    hot_start: < 500ms
    
  screen_transitions:
    navigation: < 300ms
    modal_open: < 200ms
    list_scroll: 60fps
    
  network:
    api_response: < 500ms
    image_load: < 1000ms
    cache_hit_rate: > 80%
    
  memory:
    baseline: < 50MB
    peak: < 200MB
    leak_rate: 0
    
  battery:
    idle_drain: < 1%/hour
    active_drain: < 10%/hour
    background: minimal

optimization_strategies:
  bundle_size:
    current: measure_baseline
    target: < 5MB
    techniques:
      - code_splitting
      - tree_shaking
      - minification
      - compression
      - lazy_loading
      - dynamic_imports
    monitoring:
      - chunk_analysis
      - dependency_audit
      - unused_code_detection
      
  render_optimization:
    techniques:
      - memo_components
      - virtualized_lists
      - lazy_rendering
      - batch_updates
      - avoid_reconciliation
    patterns:
      - use_callback_optimization
      - use_memo_optimization
      - pure_components
      - shallow_comparison
    monitoring:
      - render_count
      - update_frequency
      - frame_rate
      
  image_optimization:
    formats:
      - webp_conversion
      - progressive_jpeg
      - responsive_images
    techniques:
      - lazy_loading
      - preloading
      - caching
      - cdn_delivery
    sizing:
      - thumbnail_generation
      - resolution_variants
      - compression_levels

critical_path_optimization:
  exercise_search:
    current_performance:
      search_latency: measure
      result_render: measure
      scroll_performance: measure
    optimizations:
      - debounced_search
      - virtualized_results
      - image_lazy_loading
      - cache_implementation
      - prefetch_common_searches
    target_metrics:
      search_response: < 200ms
      smooth_scrolling: 60fps
      memory_stable: true
      
  workout_tracking:
    current_performance:
      timer_accuracy: measure
      state_updates: measure
      sync_performance: measure
    optimizations:
      - efficient_timers
      - batched_updates
      - background_sync
      - optimistic_ui
    target_metrics:
      timer_precision: 100ms
      ui_responsiveness: immediate
      sync_invisible: true

profiling_tools:
  react_devtools:
    - component_profiler
    - render_timeline
    - interaction_tracking
  flipper:
    - network_inspector
    - layout_inspector
    - database_browser
  performance_monitor:
    - fps_counter
    - memory_usage
    - cpu_usage
  custom_metrics:
    - user_timing_api
    - performance_marks
    - custom_tracking

monitoring_production:
  vitals:
    - first_contentful_paint
    - time_to_interactive
    - total_blocking_time
    - cumulative_layout_shift
  custom_metrics:
    - api_response_times
    - screen_load_times
    - interaction_latency
    - error_rates
  user_experience:
    - crash_free_sessions
    - anr_rate
    - frame_drops
    - jank_score

optimization_workflow:
  identify:
    - profile_performance
    - identify_bottlenecks
    - prioritize_issues
  implement:
    - apply_optimization
    - measure_impact
    - validate_improvement
  monitor:
    - track_metrics
    - detect_regression
    - continuous_improvement

code_splitting_strategy:
  routes:
    - lazy_load_screens
    - prefetch_likely_routes
    - bundle_by_feature
  components:
    - heavy_components_lazy
    - modal_lazy_loading
    - conditional_imports
  libraries:
    - vendor_splitting
    - async_imports
    - tree_shaking

caching_strategy:
  api_responses:
    strategy: lru_cache
    size: 50MB
    ttl: varies_by_endpoint
  images:
    strategy: disk_cache
    size: 100MB
    ttl: 7_days
  computed_values:
    strategy: memory_cache
    memoization: true
    invalidation: smart

tools:
  - name: BundleAnalyzer
    path: /agents/tools/bundle_analyzer.ts
  - name: PerformanceProfiler
    path: /agents/tools/performance_profiler.ts
  - name: MemoryLeakDetector
    path: /agents/tools/memory_detector.ts
  - name: NetworkOptimizer
    path: /agents/tools/network_optimizer.ts
  - name: RenderAnalyzer
    path: /agents/tools/render_analyzer.ts

automated_optimization:
  image_compression:
    trigger: on_upload
    quality: 85
    format: auto_select
  code_minification:
    trigger: on_build
    level: aggressive
    source_maps: true
  bundle_optimization:
    trigger: on_build
    split_chunks: true
    tree_shake: true

alerts:
  - metric: bundle_size
    threshold: > 6MB
    action: analyze_dependencies
  - metric: memory_usage
    threshold: > 250MB
    action: profile_memory
  - metric: fps
    threshold: < 55
    action: profile_renders
  - metric: api_response
    threshold: > 1000ms
    action: optimize_queries